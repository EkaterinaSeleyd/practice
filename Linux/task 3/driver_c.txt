#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/fs.h>
#include <linux/init.h> 
#include <linux/device.h>  
#include <linux/uaccess.h> 
#define  DEVICE_NAME "myapp"
#define CLASS_NAME "myapp"
#define SUCCESS 0

MODULE_LICENSE("GPL");

static int    majorNumber;                  
static char   message[256] = {0};          
static short  size_of_message;             
static int    numberOpens = 0;   
static struct class* myappClass = NULL;
static struct device* myappDevice = NULL; 

static int     device_open(struct inode *, struct file *);
static ssize_t device_read(struct file *, char *, size_t, loff_t *);
static ssize_t device_write(struct file *, const char *, size_t, loff_t *);
static int     device_release(struct inode *, struct file *);

struct file_operations fops = {
	.open = device_open,
	.read = device_read,
	.write = device_write,
	.release = device_release,
};

static int __init myapp_init(void) {
	printk(KERN_INFO "MyApp: Initializing the MyApp LKM\n");
	majorNumber = register_chrdev(0, DEVICE_NAME, &fops);
	if (majorNumber<0){
		printk(KERN_ALERT "MyApp failed to register a major number \n");
		return majorNumber;
	}
	printk(KERN_INFO "MyApp: registered correctly with major number %d\n", majorNumber);
	myappClass = class_create(THIS_MODULE, CLASS_NAME);
	if (IS_ERR(myappClass)){
		unregister_chrdev(majorNumber, DEVICE_NAME);
		printk(KERN_ALERT "Failed to register device class\n");
		return PTR_ERR(myappClass);
	}
	printk(KERN_INFO "MyApp: device class registered correctly\n");
	
	myappDevice = device_create(myappClass, NULL, MKDEV(majorNumber, 0), NULL, DEVICE_NAME);
	if (IS_ERR(myappDevice)){
		class_destroy(myappClass);
		unregister_chrdev(majorNumber, DEVICE_NAME);
		printk(KERN_ALERT "Failed to create the device\n");
		return PTR_ERR(myappDevice);
	}
	printk(KERN_INFO "MyApp: device class created correctly\n");
	return 0;
}

static void __exit myapp_exit(void){
	device_destroy(myappClass, MKDEV(majorNumber, 0));
	class_unregister(myappClass);
	class_destroy(myappClass);
	unregister_chrdev(majorNumber, DEVICE_NAME);
	printk(KERN_INFO "MyApp: Goodbye from the LKM!\n");
}

static int device_open(struct inode *inodep, struct file *filep){
   numberOpens++;
   printk(KERN_INFO "MyApp: Device has been opened %d time(s)\n", numberOpens);
   return 0;
}

static ssize_t device_read(struct file *filep, char *buffer, size_t len, loff_t *offset){
   int error_count = 0;
   // copy_to_user has the format ( * to, *from, size) and returns 0 on success
   error_count = copy_to_user(buffer, message, size_of_message);
 
   if (error_count==0){            // if true then have success
      printk(KERN_INFO "MyApp: Sent %d characters to the user\n", size_of_message);
      return (size_of_message=0);  // clear the position to the start and return 0
   }
   else {
      printk(KERN_INFO "MyApp: Failed to send %d characters to the user\n", error_count);
      return -EFAULT;              // Failed -- return a bad address message (i.e. -14)
   }
}

static ssize_t device_write(struct file *filep, const char *buffer, size_t len, loff_t *offset){
   sprintf(message, "%s(%zu letters)", buffer, len);   // appending received string with its length
   size_of_message = strlen(message);                 // store the length of the stored message
   printk(KERN_INFO "MyApp: Received %zu characters from the user\n", len);
   return len;
}

static int device_release(struct inode *inodep, struct file *filep){
   printk(KERN_INFO "MyApp: Device successfully closed\n");
   return 0;
}

module_init(myapp_init);
module_exit(myapp_exit);